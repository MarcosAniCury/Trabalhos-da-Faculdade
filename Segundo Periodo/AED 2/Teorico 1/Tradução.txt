				O papel da inspeção na garantia de qualidade de software

1-Introdução: Apesar de mais de 30 anos de esforço para melhorar sua qualidade, o software ainda é lançado com muitos erros. Muitos produtos principais são conhecidos por terem milhares de bugs. Não é por falta de tentativa; todos os principais desenvolvedores de software têm um esforço de garantia de qualidade de software e tentam remover bugs antes do lançamento. O problema é a complexidade do código. É muito fácil revisar o código, mas falha em perceber erros significativos. Os pesquisadores responderam a esses problemas estudando métodos de verificação formal de correção para programas. Em teoria, agora sabemos como provar que os programas estão corretos com o mesmo grau de rigor que aplicamos aos teoremas matemáticos. De fato, isso raramente é prático e ainda mais raramente é feito. A maioria dos trabalhos de pesquisa sobre verificação faz suposições simplificadoras (por exemplo, uma correspondência 1: 1 entre variáveis ​​e nomes de variáveis) que não são válidas para programas reais. As provas de programas realistas envolvem expressões longas e complexas e exigem paciência, tempo e diligência que os desenvolvedores não pensam ter. (Curiosamente, eles nunca têm tempo para verificar o programa antes do lançamento, mas precisam de um tempo para responder às reclamações após o lançamento.) Os métodos de inspeção podem ser mais eficazes que as revisões informais e exigir menos esforço do que a prova formal, mas o sucesso depende de um procedimento sólido e sistemático para a realização da inspeção. Ferramentas que suportam esse procedimento também são importantes. O Workshop sobre Inspeção em Engenharia de Software (WISE), 1 um evento satélite da Conferência de Verificação Assistida por Computador (CAV'01) de 2001, reuniu pesquisadores, profissionais e reguladores na esperança de encontrar novas abordagens mais eficazes para a inspeção de software. O workshop incluiu palestras e apresentações em papel, na forma de painéis de discussão sobre todos os aspectos da inspeção de software. As submissões explicaram como os profissionais e pesquisadores estavam realizando inspeções, discutiram a relevância das inspeções, forneceram evidências de como as inspeções poderiam ser melhoradas, embora o refinamento do processo de inspeção e o suporte de ferramentas

explicou como o design cuidadoso do software poderia tornar as inspeções mais fáceis ou mais eficazes. As melhores idéias do workshop foram destiladas em pares de trabalhos que aparecem em edições especiais vinculadas da IEEE Software Magazine (Software) e IEEE Transactions on Software Engineering (TSE).

2-POR QUE DUAS QUESTÕES ESPECIAIS LIGADAS? Um relata resultados e outro explica como usá-los ou que pesquisa ainda é necessária. Esperamos que a abordagem de questões especiais vinculadas possa ser imitada e aprimorada no futuro por outros editores convidados com outros tópicos de importância para profissionais e pesquisadores. Afinal, conectar a teoria à prática é a essência de qualquer tipo de engenharia.Como editores convidados, tínhamos um objetivo muito específico quando propusemos as edições especiais conjuntas aos conselhos editoriais das publicações. Observamos que os praticantes, que leem Software, tendem a negligenciar o tipo de pesquisa encontrada no TSE na (às vezes correta) suposição de que isso é irrelevante para eles. Por outro lado, os pesquisadores tendem a escrever um para o outro e a perder contato com as realidades que os profissionais precisam enfrentar. Os problemas vinculados tentam diminuir essa lacuna. Alguns dos colaboradores do WISE foram profissionais cuja contribuição foi explicar o que estão fazendo e quais problemas encontram. Outros eram pesquisadores que tentavam descobrir e verificar (matematicamente ou experimentalmente) alguns fatos fundamentais. Pensamos que os autores do pesquisador deveriam escrever trabalhos que explicassem aos profissionais por que os problemas que estavam estudando eram relevantes para a prática. Também pensamos que os profissionais poderiam comunicar aos pesquisadores como é tentar inspecionar um programa na prática. Para resumir:
1. O objetivo dos trabalhos em Software é conscientizar os profissionais das idéias de pesquisa que eles podem aplicar. Eles não precisam comunicar os resultados da pesquisa tão completamente quanto um trabalho de pesquisa normal faria. 2. Os trabalhos do TSE comunicam os resultados da pesquisa. Consideramos um artigo fazer uma contribuição válida se mostrar como os resultados conhecidos podem ser aplicados ao problema de inspecionar o software quanto à adequação (adequação ao uso); os trabalhos devem ser lidos por pessoas dispostas a ler trabalhos de pesquisa detalhados e cuidadosos. Os artigos de interesse imediato para os profissionais (por exemplo, relatórios de experiência) estão sendo publicados no Software, mas o TSE informará os pesquisadores sobre problemas interessantes de pesquisa levantados por esse artigo. Da mesma forma, os trabalhos de pesquisa estão sendo publicados no TSE, mas os profissionais podem aprender o que é relevante para eles sobre a pesquisa, lendo o artigo de Software. Os artigos de software enfatizam o que pode ser feito agora e os artigos do TSE enfatizam questões de longo prazo. Pretende-se que haja muito pouca sobreposição entre os dois artigos.

3-O QUE SIGNIFICAMOS POR INSPEÇÃO? Por "inspeção", entendemos uma abordagem sistemática para examinar um programa em detalhes. O objetivo desse exame é avaliar a qualidade do produto de software em questão, não a qualidade do processo usado para desenvolver o produto. Em geral, “inspeção” refere-se à análise de um produto, seguindo um processo sistemático prescrito, destinado a determinar se o produto é adequado ou não para o uso pretendido. Por exemplo, muitas jurisdições exigem uma inspeção de segurança para veículos.2 Eles legislam uma lista de peças que devem ser examinadas, medições que devem ser feitas, etc., e critérios para aprovação na inspeção. A palavra "inspeção" geralmente implica que o processo seja descrito em documentos (por exemplo, listas de verificação, formulários impressos) que descrevem exatamente o que os inspetores devem fazer durante a inspeção. O objetivo desses documentos é garantir que cada inspeção seja tão cuidadosa e completa que a falha em revelar qualquer defeito justifique ter grande confiança de que o produto funcionará conforme necessário. Um processo de inspeção, embora sistemático e rigorosamente prescrito, não é mecânico; a descrição do processo orienta os inspetores, mas não é tão prescritiva que as inspeções possam ser feitas por uma máquina sem o envolvimento humano. O sucesso depende dos inspectores que compreendem o produto e as tecnologias subjacentes, sabem como usar as ferramentas apropriadas e têm uma experiência considerável no trabalho relacionado. Como os inspetores, como todos nós, têm limites em sua capacidade de lidar com detalhes, a chave para a inspeção de qualquer produto complexo é uma política de divisão e conquista, ou seja, fazer com que o inspetor examine pequenas partes do produto isoladamente, enquanto faz Certifique-se de que 1) nada é esquecido e 2) que a correção de todos os componentes inspecionados implica a correção de todo o produto. A decomposição da inspeção em etapas discretas deve garantir que cada etapa seja simples o suficiente para que possa ser realizada com confiabilidade e que uma etapa de inspeção possa ser realizada sem o conhecimento detalhado dos outros. A inspeção pode ser um processo demorado. Além disso, nenhum processo de inspeção é perfeito. Os inspetores podem ter atalhos, podem não ter um entendimento adequado do que estão fazendo e podem identificar um produto como aceitável quando não o é. No entanto, um processo de inspeção bem projetado pode encontrar erros que seriam perdidos por outros métodos e gerar grande confiança.

4-OS BENEFÍCIOS DA INSPEÇÃO: O teste é amplamente empregado pela indústria e a verificação formal amplamente defendida pela comunidade de pesquisa como métodos para melhorar a qualidade do software. A inspeção ocorre em algum momento entre o teste e a verificação formal. A verificação formal ainda precisa ser alcançada pelos profissionais de software, enquanto a inspeção de uma forma ou de outra foi amplamente adotada pela indústria e defendida pelos principais profissionais de software. As principais razões para essa diferença de aceitação são que a inspeção pode ser usada diretamente no próprio código, não em modelos abstratos, e porque não exige um investimento tão substancial em treinamento quanto a verificação exigiria. Também não requer a capacidade de manipulação de tempo e fórmula que a verificação de programas típicos exigiria. A inspeção procura complementar os testes. O teste e a verificação formal ajudam a detectar erros e determinar a correção matemática, respectivamente, mas é possível ter um código sem erros (matematicamente correto) difícil de entender e de manter. Além de encontrar erros no código e nos documentos de software relacionados, a inspeção também pode ajudar a determinar se as diretrizes de estilo de codificação são seguidas, os comentários no código são relevantes e de tamanho apropriado, as convenções de nomenclatura são claras e consistentes, o código pode ser facilmente mantido, etc. Quando se trata do custo de criar e manter grandes produtos de software, esses problemas são cruciais. Para os provadores de teoremas, verificadores de modelos e ferramentas de teste automatizadas, essas questões são irrelevantes. Não é necessário aguardar a conclusão do código para colher os benefícios da inspeção. A inspeção antecipada de um documento que declara os requisitos do sistema pode ajudar a garantir que o sistema correto seja construído. Em nossa experiência, mesmo quando os requisitos matemáticos estão sendo usados ​​na verificação formal de um produto, eles podem não capturar com precisão a intenção do designer ou do cliente. A inspeção de um documento de requisitos ajuda a garantir que os requisitos estejam capturando a coisa certa.

5-O FUTURO DA INSPEÇÃO: Enquanto muitas empresas estão realizando inspeções, a eficácia das inspeções pode ser melhorada. Os artigos de software fornecem informações sobre como os profissionais de software podem melhorar a eficácia e a aplicabilidade de suas inspeções hoje. Os artigos de pesquisa no TSE fornecem os fundamentos teóricos dessas melhorias sugeridas e oferecem insights sobre como as inspeções poderão ser melhoradas ainda mais no futuro. Os artigos do TSE são evidências de que a inspeção continua sendo uma área ativa da pesquisa acadêmica.

5.1 Refinando o processo de inspeção de software Uma maneira que pesquisadores e profissionais estão trabalhando para resolver as limitações das técnicas de inspeção atuais é refinando os métodos de inspeção para torná-los mais apropriados para uma determinada configuração e ajudando os inspetores a manter o foco em encontrar os problemas de importação mais importantes no mercado. mar de detalhes. Dunsmore et al., "O desenvolvimento e avaliação de três técnicas diversas para inspeção de código orientado a objetos", propõe três novas técnicas para a inspeção de sistemas OO e fornece alguns dados preliminares sobre sua relativa eficácia. A leitura pode ser uma forma rudimentar de inspeção. Thelin et al., "Uma comparação experimental da leitura baseada no uso e na lista de verificação", descreve duas técnicas de leitura diferentes e fornece um estudo detalhado sobre sua eficácia. Ambos os documentos ilustram como a personalização do processo de inspeção para a tarefa em questão pode fornecer benefícios.

5.2 Sistemas com requisitos em tempo real e atividades simultâneas Os sistemas de software que devem lidar com uma variedade de atividades em andamento (por exemplo, gerenciamento de dispositivos, interações com usuários, monitoramento de eventos externos) foram considerados menos confiáveis ​​do que programas puramente seqüenciais. A simultaneidade introduz uma forma de não determinismo3 no sistema - eventos externos, que ocorrem em momentos imprevisíveis, determinam a ordem dos eventos internos. Quando o não-determinismo está presente, a incapacidade do avaliador de permanecer ciente de todas as sequências possíveis dificulta a inspeção. O não determinismo torna o teste mais difícil, porque uma sequência de teste pode causar um erro em um caso e não em outro. Uma abordagem para a avaliação da qualidade de software de sistemas com requisitos em tempo real na presença de simultaneidade que parece valer a pena explorar é restringir o design para colocá-lo em uma classe mais fácil de analisar. No que provavelmente é o artigo mais controverso nas edições especiais, o artigo “On Inspection and Verification with Timing Requirements” de Xu defende o tratamento de sistemas simultâneos em tempo real por meio de uma abordagem de programação em pré-tempo. Xu está pedindo aos designers que aceitem fortes restrições em seu trabalho para facilitar o trabalho do inspetor.

5.3 Inspeção de software suportada por ferramentas Parte da motivação para organizar o Workshop sobre Inspeção em Engenharia de Software como um evento satélite do CAV '01 decorre da opinião dos editores convidados de que as técnicas de inspeção e verificação formal auxiliadas por computador representam a área de maior potencial para o futuro de inspeção. Desde ferramentas para dar suporte ao fluxo de trabalho e à contabilidade do processo de inspeção, até técnicas integradas de verificação auxiliada por computador, para permitir que os inspetores façam perguntas importantes e delegem alguns dos detalhes mecânicos a verificadores de modelos, provadores de teoremas e outras ferramentas, existem muitas maneiras de as ferramentas melhorarem a eficiência e a precisão das inspeções. Em "Design e implementação de uma ferramenta de inspeção de software refinada", Anderson et al. descrever as questões teóricas e práticas subjacentes a uma ferramenta que pode ser usada para tornar mais fácil a inspeção de sistemas de software complexos.

6-CONCLUSÃO: Em maio deste ano, uma espaçonave Soyuz TMA-1 carregando um cosmonauta russo e dois astronautas americanos pousaram quase 500 km fora do curso depois que a nave inesperadamente mudou para uma trajetória de reentrada balística. As indicações preliminares são de que o problema foi causado por software no computador de orientação na nova versão modificada da nave espacial. Na mesma semana, verificou-se que o sistema de repositório de informações on-line do Microsoft Passport apresentava uma falha de segurança importante que permitia ao invasor obter acesso às informações pessoais de um usuário simplesmente conhecendo seu endereço de e-mail e construindo um URL apropriado. Estes são apenas os exemplos mais recentes de falhas na qualidade do software que estão abalando a confiança do público de que o software pode ser usado para criar sistemas seguros e protegidos. Em resposta, os profissionais de software e os pesquisadores de software precisam melhorar a reputação do software e a única maneira de fazer isso é melhorar a qualidade do software. A inspeção é uma maneira de melhorar a qualidade do software. Ainda assim, são necessárias mais pesquisas para encontrar maneiras mais práticas e eficazes de fazer inspeções e para medir a eficácia dessas abordagens. Esperamos que essas edições especiais de Software e TSE sobre Inspeção de Software motivem outras pessoas a assumir o desafio cada vez mais importante de melhorar a eficácia e a praticidade das inspeções de software.






